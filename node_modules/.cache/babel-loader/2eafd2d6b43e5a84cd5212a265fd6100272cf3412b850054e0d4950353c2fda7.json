{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elewa\\\\Desktop\\\\memory game\\\\memory\\\\src\\\\components\\\\Cards\\\\Cards.component.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './Cards.styles.css';\nimport Card from '../Card/Card.component';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { emptySelected, pushToSelected } from '../../redux/selectedSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Cards() {\n  _s();\n  let [cards, setCards] = useState([]);\n  useEffect(() => {\n    getCards();\n  }, []);\n\n  //use it to random cards\n  const sortRandomly = array => array.sort(() => Math.random() - 0.5);\n  const cardsHandle = cards => {\n    // limit number of shapes\n    let limitedCards = cards.slice(4);\n    //duplicate my cards\n    limitedCards.push(...limitedCards);\n    //sort my data randomly\n    let myRandomData = sortRandomly(limitedCards);\n    //store my data\n    setCards(myRandomData);\n  };\n  const getCards = async function () {\n    try {\n      const {\n        data\n      } = await axios.get('https://jsonplaceholder.typicode.com/users');\n      cardsHandle(data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  let [rotateAngle, setRotateAngle] = useState(0);\n  let [idToRemove, setIdToRemove] = useState(0);\n  const {\n    selected\n  } = useSelector(store => store);\n  const dispatch = useDispatch();\n  const flipCard = () => {\n    if (rotateAngle === 0) {\n      setRotateAngle(180);\n    } else {\n      setRotateAngle(0);\n    }\n  };\n  const checkMatching = selected => {\n    if (selected.length == 2) {\n      console.log(selected);\n      if (selected[0] === selected[1]) {\n        setIdToRemove(selected[0]);\n        dispatch(emptySelected());\n      } else {\n        dispatch(emptySelected());\n      }\n      setRotateAngle(0);\n    }\n  };\n  const cardHandle = id => {\n    flipCard();\n    dispatch(pushToSelected(id));\n    checkMatching(selected);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cards\",\n    children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n      cardHandle: cardHandle,\n      ...card,\n      rotateAngle: rotateAngle,\n      idToRemove: idToRemove\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 38\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(Cards, \"JgPurUzA8P6XMc4luvW8H/57wvk=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["React","useEffect","useState","axios","Card","useDispatch","useSelector","emptySelected","pushToSelected","jsxDEV","_jsxDEV","Cards","_s","cards","setCards","getCards","sortRandomly","array","sort","Math","random","cardsHandle","limitedCards","slice","push","myRandomData","data","get","error","console","log","rotateAngle","setRotateAngle","idToRemove","setIdToRemove","selected","store","dispatch","flipCard","checkMatching","length","cardHandle","id","className","children","map","card","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/elewa/Desktop/memory game/memory/src/components/Cards/Cards.component.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport './Cards.styles.css';\r\nimport Card from '../Card/Card.component';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {emptySelected, pushToSelected } from '../../redux/selectedSlice';\r\n\r\nexport default function Cards() {\r\n    let [cards,setCards]=useState([]);\r\n    \r\n\r\n    useEffect(()=>{\r\n        getCards()\r\n    },[])\r\n    \r\n\r\n    //use it to random cards\r\n    const sortRandomly = (array) => array.sort(() => Math.random() - 0.5);\r\n    \r\n    const cardsHandle=(cards)=>{\r\n        // limit number of shapes\r\n        let limitedCards=cards.slice(4)\r\n        //duplicate my cards\r\n        limitedCards.push(...limitedCards)\r\n        //sort my data randomly\r\n        let myRandomData=sortRandomly(limitedCards);\r\n        //store my data\r\n        setCards(myRandomData);\r\n    }\r\n    const getCards=async function () {\r\n        try{\r\n            const {data}=await axios.get('https://jsonplaceholder.typicode.com/users');\r\n            cardsHandle(data)\r\n        }catch (error) {\r\n            console.log(error);\r\n          }\r\n        \r\n    }\r\n\r\n    \r\n    let [rotateAngle,setRotateAngle]=useState(0);\r\n    \r\n    let [idToRemove,setIdToRemove]=useState(0);\r\n    const {selected}= useSelector((store)=>  store);\r\n    const dispatch=useDispatch();\r\n\r\n    \r\n    const flipCard =()=>{\r\n        if(rotateAngle===0){\r\n            setRotateAngle(180);\r\n        }else{\r\n            setRotateAngle(0); \r\n        }\r\n        \r\n    }\r\n\r\n    const checkMatching=(selected)=>{\r\n        if(selected.length ==2){\r\n            console.log(selected);\r\n            if(selected[0] === selected[1]){\r\n                setIdToRemove(selected[0])\r\n                dispatch(emptySelected())\r\n            }else{\r\n                dispatch(emptySelected())\r\n            }\r\n            setRotateAngle(0)\r\n        }\r\n    }\r\n       \r\n    const cardHandle =(id)=>{\r\n        flipCard();\r\n        dispatch(pushToSelected(id))\r\n        checkMatching(selected)\r\n    }\r\n\r\n    \r\n  return (\r\n    <div className=\"cards\">\r\n        {\r\n            cards.map((card,index)=> <Card cardHandle={cardHandle} key={index} {...card} rotateAngle={rotateAngle} idToRemove={idToRemove} />)\r\n        }\r\n        \r\n    </div>\r\n  )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}